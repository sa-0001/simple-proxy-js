// Generated by CoffeeScript 1.12.7
var SimpleProxy, log, tap,
  slice = [].slice;

log = console.log.bind(console);

tap = require('@sa0001/wrap-tap');

SimpleProxy = require('./index');

tap.test('simple-proxy', function(t) {
  var testDeepObj, testFlatArr, testFlatObj;
  testFlatObj = function() {
    return {
      a: 0,
      b: 1
    };
  };
  testDeepObj = function() {
    return {
      a: {
        b: {}
      }
    };
  };
  testFlatArr = function() {
    return ['a', 'b'];
  };
  t.test('native getter/setter', function(t) {
    var get_raw, obj;
    get_raw = function() {
      var raw;
      raw = {};
      (function() {
        return Object.defineProperty(raw, 'g', {
          enumerable: true,
          get: function() {
            return 'getter';
          },
          set: function() {}
        });
      })();
      (function() {
        var v;
        v = void 0;
        return Object.defineProperty(raw, 's', {
          enumerable: true,
          get: function() {
            return v;
          },
          set: function() {
            return v = 'setter';
          }
        });
      })();
      return raw;
    };
    obj = get_raw();
    t.noDiff(obj, {
      g: 'getter',
      s: void 0
    });
    obj.g = '...';
    obj.s = '...';
    t.noDiff(obj, {
      g: 'getter',
      s: 'setter'
    });
    obj = SimpleProxy["new"](get_raw(), {
      preventAccess: true,
      preventDefine: true,
      preventDelete: true,
      preventExtend: true
    });
    t.noDiff(obj, {
      g: 'getter',
      s: void 0
    });
    obj.g = '...';
    obj.s = '...';
    return t.noDiff(obj, {
      g: 'getter',
      s: 'setter'
    });
  });
  t.test('onError', function(t) {
    var error_access_fn, error_access_msg, error_delete_fn, error_delete_msg, error_mutate_fn, error_mutate_msg, last_error, obj, raw;
    raw = {
      a: 'a',
      b: 'b'
    };
    obj = null;
    last_error = null;
    error_access_fn = function() {
      return obj.c;
    };
    error_delete_fn = function() {
      return delete obj.a;
    };
    error_mutate_fn = function() {
      return obj.b = 'c';
    };
    error_access_msg = "SimpleProxy: cannot access non-defined key 'c'";
    error_delete_msg = "SimpleProxy: cannot delete key 'a'";
    error_mutate_msg = "SimpleProxy: cannot mutate key 'b'";
    obj = SimpleProxy.freeze(raw);
    t.throwMatch(error_access_fn, error_access_msg);
    t.throwMatch(error_delete_fn, error_delete_msg);
    t.throwMatch(error_mutate_fn, error_mutate_msg);
    obj = SimpleProxy.freeze(raw, {
      onError: function(err) {
        return last_error = err;
      }
    });
    t.notThrow(error_access_fn);
    t.eq(last_error.message, error_access_msg);
    t.eq(last_error.code, 'ACCESS');
    t.notThrow(error_delete_fn);
    t.eq(last_error.message, error_delete_msg);
    t.eq(last_error.code, 'DELETE');
    t.notThrow(error_mutate_fn);
    t.eq(last_error.message, error_mutate_msg);
    return t.eq(last_error.code, 'MUTATE');
  });
  t.test('onGet, onSet, onChange', function(t) {
    var changeReports, getReports, obj, setReports, val;
    getReports = [];
    setReports = [];
    changeReports = [];
    obj = SimpleProxy["new"](testFlatObj(), {
      onGet: function(k) {
        return getReports.push(k);
      },
      onSet: function(k) {
        return setReports.push(k);
      },
      onChange: function(k) {
        return changeReports.push(k);
      }
    });
    val = obj.c;
    obj.c = val;
    obj.d = val;
    val = obj.d;
    obj.d = val;
    val = obj.d;
    obj.e = null;
    obj.e = 'e';
    t.eq(getReports.join(', '), 'c, d, d');
    t.eq(setReports.join(', '), 'c, d, d, e, e');
    return t.eq(changeReports.join(', '), 'e, e');
  });
  t.test('onChange with setter', function(t) {
    var obj, proxy, result;
    obj = {};
    (function() {
      var val;
      val = void 0;
      return Object.defineProperty(obj, 'name', {
        get: function() {
          return val;
        },
        set: function(v) {
          return val = v.trim();
        }
      });
    })();
    result = void 0;
    proxy = SimpleProxy["new"](obj, {
      onChange: function(key, newVal, oldVal) {
        return result = slice.call(arguments);
      }
    });
    proxy.name = ' alpha beta ';
    t.eq(proxy.name, 'alpha beta');
    return t.noDiff(result, ['name', 'alpha beta', void 0]);
  });
  t.test('onGetNonDefined, onSetNonDefined', function(t) {
    var getReports, obj, setReports, val;
    getReports = [];
    setReports = [];
    obj = SimpleProxy["new"](testFlatObj(), {
      onGetNonDefined: function(k) {
        return getReports.push(k);
      },
      onSetNonDefined: function(k) {
        return setReports.push(k);
      }
    });
    val = obj.c;
    obj.c = val;
    obj.d = val;
    val = obj.d;
    obj.d = val;
    val = obj.d;
    t.eq(getReports.join(', '), 'c');
    return t.eq(setReports.join(', '), 'c, d');
  });
  t.test('deep onGet, onSet, onChange', function(t) {
    var changeReports, getReports, obj, setReports, val;
    getReports = [];
    setReports = [];
    changeReports = [];
    obj = SimpleProxy["new"](testDeepObj(), {
      deepProxy: true,
      onGet: function(k) {
        return getReports.push(k);
      },
      onSet: function(k) {
        return setReports.push(k);
      },
      onChange: function(k) {
        return changeReports.push(k);
      }
    });
    val = obj.a.b.c;
    obj.a.b.c = true;
    obj.a.b.d = true;
    val = obj.a.b.d;
    obj.a.b.d = true;
    val = obj.a.b.d;
    obj.a.b.e = null;
    obj.a.b.e = 'e';
    t.eq(val, true);
    t.eq(getReports.join(', '), 'a, a.b, a.b.c, a, a.b, a, a.b, a, a.b, a.b.d, a, a.b, a, a.b, a.b.d, a, a.b, a, a.b');
    t.eq(setReports.join(', '), 'a.b.c, a.b.d, a.b.d, a.b.e, a.b.e');
    return t.eq(changeReports.join(', '), 'a.b.c, a.b.d, a.b.e, a.b.e');
  });
  t.test('deep onGetNonDefined, onSetNonDefined', function(t) {
    var getReports, obj, setReports, val;
    getReports = [];
    setReports = [];
    obj = SimpleProxy["new"](testDeepObj(), {
      deepProxy: true,
      onGetNonDefined: function(k) {
        return getReports.push(k);
      },
      onSetNonDefined: function(k) {
        return setReports.push(k);
      }
    });
    val = obj.a.b.c;
    obj.a.b.c = true;
    obj.a.b.d = true;
    val = obj.a.b.d;
    obj.a.b.d = true;
    val = obj.a.b.d;
    t.eq(val, true);
    t.eq(getReports.join(', '), 'a.b.c');
    return t.eq(setReports.join(', '), 'a.b.c, a.b.d');
  });
  t.test('convertUndefinedToNull == true', function(t) {
    var obj, raw_obj;
    raw_obj = {
      a: void 0,
      b: null
    };
    Object.defineProperty(raw_obj, 'c', {
      configurable: true,
      enumerable: true,
      get: function() {
        return void 0;
      }
    });
    Object.defineProperty(raw_obj, 'd', {
      configurable: true,
      enumerable: true,
      get: function() {
        return null;
      }
    });
    obj = SimpleProxy["new"](raw_obj, {
      convertUndefinedToNull: true
    });
    t.noDiff(obj, {
      a: null,
      b: null,
      c: null,
      d: null
    }, {
      ignoreNullVsUndefined: false
    });
    obj.b = void 0;
    Object.defineProperty(obj, 'd', {
      configurable: true,
      enumerable: true,
      get: function() {
        return void 0;
      }
    });
    obj.g = void 0;
    return t.noDiff(obj, {
      a: null,
      b: null,
      c: null,
      d: null,
      g: null
    }, {
      ignoreNullVsUndefined: false
    });
  });
  t.test('preventAccess == true', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventAccess: true
      });
      return t.eq(obj.c, void 0);
    };
    t.throwMatch(fn, "SimpleProxy: cannot access non-defined key 'c'");
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventAccess: true
      });
      return t.eq(arr[2], void 0);
    };
    return t.throwMatch(fn, "SimpleProxy: cannot access non-defined key '2'");
  });
  t.test('preventAccess == false', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventAccess: false
      });
      return t.eq(obj.c, void 0);
    };
    t.notThrow(fn);
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventAccess: false
      });
      return t.eq(arr[2], void 0);
    };
    return t.notThrow(fn);
  });
  t.test('preventDefine == true', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventDefine: true
      });
      return Object.defineProperty(obj, 'a', {
        value: 2
      });
    };
    t.throwMatch(fn, "SimpleProxy: cannot define key 'a'");
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventDefine: true
      });
      return Object.defineProperty(arr, 0, {
        value: 'c'
      });
    };
    return t.throwMatch(fn, "SimpleProxy: cannot define key '0'");
  });
  t.test('preventDefine == false', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventDefine: false
      });
      return Object.defineProperty(obj, 'a', {
        value: 2
      });
    };
    t.notThrow(fn);
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventDefine: false
      });
      return Object.defineProperty(arr, 0, {
        value: 'c'
      });
    };
    return t.notThrow(fn);
  });
  t.test('preventDelete == true', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventDelete: true
      });
      return delete obj.a;
    };
    t.throwMatch(fn, "SimpleProxy: cannot delete key 'a'");
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventDelete: true
      });
      return delete arr[0];
    };
    return t.throwMatch(fn, "SimpleProxy: cannot delete key '0'");
  });
  t.test('preventDelete == false', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventDelete: false
      });
      return delete obj.a;
    };
    t.notThrow(fn);
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventDelete: false
      });
      return delete arr[0];
    };
    return t.notThrow(fn);
  });
  t.test('preventExtend == true', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventExtend: true
      });
      return obj.c = 2;
    };
    t.throwMatch(fn, "SimpleProxy: cannot extend key 'c'");
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventExtend: true
      });
      return arr.push('c');
    };
    return t.throwMatch(fn, "SimpleProxy: cannot extend key '2'");
  });
  t.test('preventExtend == false', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventExtend: false
      });
      return obj.c = 2;
    };
    t.notThrow(fn);
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventExtend: false
      });
      return Object.defineProperty(obj, 'c', {
        value: 2
      });
    };
    t.notThrow(fn);
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventExtend: false
      });
      return arr.push('c');
    };
    t.notThrow(fn);
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventExtend: false
      });
      return Object.defineProperty(arr, 2, {
        value: 'c'
      });
    };
    return t.notThrow(fn);
  });
  t.test('preventMutate == true', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventMutate: true
      });
      return obj.a = false;
    };
    t.throwMatch(fn, "SimpleProxy: cannot mutate key 'a'");
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventMutate: true
      });
      return arr.push('c');
    };
    return t.throwMatch(fn, "SimpleProxy: cannot mutate key '2'");
  });
  t.test('preventMutate == false', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventMutate: false
      });
      return obj.a = false;
    };
    t.notThrow(fn);
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventMutate: false
      });
      return arr.push('c');
    };
    return t.notThrow(fn);
  });
  t.test('preventUndefined == true', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventUndefined: true
      });
      return obj.c = void 0;
    };
    t.throwMatch(fn, "SimpleProxy: cannot set undefined on key 'c'");
    fn = function() {
      return SimpleProxy["new"]({
        a: 0,
        b: 1,
        c: void 0
      }, {
        preventUndefined: true
      });
    };
    t.throwMatch(fn, "SimpleProxy: cannot set undefined on key 'c'");
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventUndefined: true
      });
      return arr.push(void 0);
    };
    t.throwMatch(fn, "SimpleProxy: cannot set undefined on key '2'");
    fn = function() {
      return SimpleProxy["new"](['a', 'b', void 0], {
        preventUndefined: true
      });
    };
    return t.throwMatch(fn, "SimpleProxy: cannot set undefined on key '2'");
  });
  t.test('preventUndefined == false', function(t) {
    var fn;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"](testFlatObj(), {
        preventUndefined: false
      });
      return obj.c = void 0;
    };
    t.notThrow(fn);
    fn = function() {
      return SimpleProxy["new"]({
        a: 0,
        b: 1,
        c: void 0
      }, {
        preventUndefined: false
      });
    };
    t.notThrow(fn);
    fn = function() {
      var arr;
      arr = SimpleProxy["new"](testFlatArr(), {
        preventUndefined: false
      });
      return arr.push(void 0);
    };
    t.notThrow(fn);
    fn = function() {
      return SimpleProxy["new"](['a', 'b', void 0], {
        preventUndefined: false
      });
    };
    return t.notThrow(fn);
  });
  t.test('deepProxy simple', function(t) {
    var fn, obj;
    fn = function() {
      var obj;
      obj = SimpleProxy["new"]({
        a: {
          b: {
            c: {
              d: {
                e: {}
              }
            }
          }
        }
      }, {
        deepProxy: true
      });
      return t.eq(obj.a.b.c.d.e.f, void 0);
    };
    t.notThrow(fn);
    obj = SimpleProxy["new"]({
      a: {
        b: {
          c: {
            d: {
              e: 'Hello World!'
            }
          }
        }
      }
    }, {
      preventAccess: true,
      preventDefine: true,
      preventDelete: true,
      preventExtend: true,
      preventMutate: true,
      preventUndefined: true,
      deepProxy: true
    });
    t.throwMatch(function() {
      return t.eq(obj.a.b.c.d.f, void 0);
    }, "SimpleProxy: cannot access non-defined key 'a.b.c.d.f'");
    t.throwMatch(function() {
      return Object.defineProperty(obj.a.b.c.d, 'e', {
        enumerable: false
      });
    }, "SimpleProxy: cannot define key 'a.b.c.d.e'");
    t.throwMatch(function() {
      return Object.defineProperty(obj.a.b.c.d, 'f', {
        value: true
      });
    }, "SimpleProxy: cannot define key 'a.b.c.d.f'");
    t.throwMatch(function() {
      return delete obj.a.b.c.d.e;
    }, "SimpleProxy: cannot delete key 'a.b.c.d.e'");
    t.throwMatch(function() {
      return obj.a.b.c.d.f = 'g';
    }, "SimpleProxy: cannot extend key 'a.b.c.d.f'");
    t.throwMatch(function() {
      return obj.a.b.c.d.e = false;
    }, "SimpleProxy: cannot mutate key 'a.b.c.d.e'");
    obj = SimpleProxy["new"]({
      a: {
        b: {
          c: {
            d: {
              e: 'Hello World!'
            }
          }
        }
      }
    }, {
      preventUndefined: true,
      deepProxy: true
    });
    return t.throwMatch(function() {
      return obj.a.b.c.d.e = void 0;
    }, "SimpleProxy: cannot set undefined on key 'a.b.c.d.e'");
  });
  t.test('deepProxy simple', function(t) {
    var obj;
    obj = SimpleProxy["new"]({
      a: [
        {
          b: [
            {
              c: [
                {
                  d: [
                    {
                      e: 'Hello World!'
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }, {
      preventAccess: true,
      preventDefine: true,
      preventDelete: true,
      preventExtend: true,
      preventMutate: true,
      preventUndefined: true,
      deepProxy: true
    });
    t.eq(obj.a[0].b[0].c[0].d[0].e, 'Hello World!');
    return t.throwMatch(function() {
      return obj.a[0].b[0].c[0].d[0].e = false;
    }, "SimpleProxy: cannot mutate key 'a[0].b[0].c[0].d[0].e'");
  });
  return t.test('nested proxies', function(t) {
    var proxy1, proxy2, proxy3, raw, ref, ref1, ref2, ref3;
    raw = {
      a: 'a'
    };
    proxy1 = SimpleProxy.access(raw, {
      name: 'proxy1'
    });
    proxy2 = SimpleProxy.access(proxy1, {
      name: 'proxy2'
    });
    proxy3 = SimpleProxy.access(proxy2, {
      name: 'proxy3'
    });
    t.ok(((proxy1.a === (ref1 = proxy2.a) && ref1 === (ref = proxy3.a)) && ref === 'a'));
    t.throwMatch((function() {
      return proxy1.b;
    }), "proxy1: cannot access non-defined key 'b'");
    t.throwMatch((function() {
      return proxy2.b;
    }), "proxy2: cannot access non-defined key 'b'");
    t.throwMatch((function() {
      return proxy3.b;
    }), "proxy3: cannot access non-defined key 'b'");
    proxy3.b = 'b';
    return t.ok(((proxy1.b === (ref3 = proxy2.b) && ref3 === (ref2 = proxy3.b)) && ref2 === 'b'));
  });
});
