// Generated by CoffeeScript 1.12.7
var SimpleProxy, _, debug, defaultOpts, local;

_ = {
  defaults: require('lodash/defaults'),
  isEqual: require('lodash/isEqual'),
  keys: require('lodash/keys'),
  omit: require('lodash/omit'),
  pick: require('lodash/pick')
};

_.typeOf = require('@sa0001/type-of');

debug = function() {};

defaultOpts = {
  name: 'SimpleProxy',
  preventAccess: false,
  preventDefine: false,
  preventDelete: false,
  preventExtend: false,
  preventMutate: false,
  preventUndefined: false,
  convertUndefinedToNull: false,
  onError: null,
  onGet: void 0,
  onSet: void 0,
  onChange: void 0,
  onGetNonDefined: void 0,
  onSetNonDefined: void 0,
  deepProxy: false,
  deepProxyOptions: null,
  _rootName: null
};

local = {
  makeError: function(code, message) {
    var err;
    err = Error(message);
    err.code = code;
    return err;
  },
  makeKey: function(root, key) {
    if (!root) {
      return key;
    }
    if (/^[\d]$/.test(key)) {
      return root + '[' + key + ']';
    } else {
      return root + '.' + key;
    }
  },
  prototypeFields: ['__esModule', 'constructor', 'inspect', 'length', 'toJSON', 'toString']
};

SimpleProxy = (function() {
  SimpleProxy["new"] = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(this, arguments, function(){});
  };

  function SimpleProxy(self, opts) {
    var childOpts, currentOpts, err, key, proxy, ref, val;
    if (self == null) {
      self = {};
    }
    if (opts == null) {
      opts = {};
    }
    if (typeof Proxy === "undefined" || Proxy === null) {
      return self;
    }
    _.defaults(opts, defaultOpts);
    currentOpts = _.pick(opts, _.keys(defaultOpts));
    if (currentOpts.onError == null) {
      currentOpts.onError = function(err) {
        throw err;
      };
    }
    proxy = new Proxy(self, {

      /*
      			getOwnPropertyDescriptor: (obj, key) ->
      				debug 'getOwnPropertyDescriptor:'+key
      				
      				 * default behavior
      				return Reflect.getOwnPropertyDescriptor obj, key
      			
      			getPrototypeOf: (obj) ->
      				debug 'getPrototypeOf'
      				
      				 * default behavior
      				return Reflect.getPrototypeOf obj
      			
      			isExtensible: (obj) ->
      				debug 'isExtensible'
      				
      				 * default behavior
      				return Reflect.isExtensible obj
      			
      			ownKeys: (obj) ->
      				debug 'ownKeys'
      				
      				 * default behavior
      				return Reflect.ownKeys obj
       */
      preventExtensions: function(obj) {
        debug('preventExtensions');
        return false;
      },
      setPrototypeOf: function(obj) {
        debug('setPrototypeOf');
        return false;
      },
      defineProperty: function(obj, key, descriptor) {
        var err;
        debug('defineProperty:' + key);
        if (currentOpts.preventDefine === true) {
          err = local.makeError('DEFINE', currentOpts.name + ": cannot define key '" + (local.makeKey(opts._rootName, key)) + "'");
          return currentOpts.onError(err);
        }
        Reflect.defineProperty(obj, key, descriptor);
        return true;
      },
      deleteProperty: function(obj, key) {
        var err;
        debug('deleteProperty:' + key);
        if (currentOpts.preventDelete === true) {
          err = local.makeError('DELETE', currentOpts.name + ": cannot delete key '" + (local.makeKey(opts._rootName, key)) + "'");
          return currentOpts.onError(err);
        }
        delete obj[key];
        return true;
      },
      has: function(obj, key) {
        if (typeof key === 'symbol') {
          return;
        }
        debug('has:' + key);
        return key in obj;
      },
      get: function(obj, key) {
        var err, fullKey, hasKey, hasOwnKey, hasProtoKey, val;
        if (typeof key === 'symbol') {
          return;
        }
        debug('get:' + key);
        hasKey = key in obj;
        hasOwnKey = Object.prototype.hasOwnProperty.call(obj, key);
        hasProtoKey = (hasKey && !hasOwnKey) || local.prototypeFields.indexOf(key) > -1;
        if (hasProtoKey) {
          return obj[key];
        }
        fullKey = local.makeKey(opts._rootName, key);
        if (currentOpts.onGet) {
          currentOpts.onGet(fullKey);
        }
        if (currentOpts.onGetNonDefined && !hasOwnKey) {
          currentOpts.onGetNonDefined(fullKey);
        }
        if (currentOpts.preventAccess === true && !hasOwnKey) {
          err = local.makeError('ACCESS', currentOpts.name + ": cannot access non-defined key '" + fullKey + "'");
          return currentOpts.onError(err);
        }
        val = obj[key];
        if (val === void 0 && currentOpts.convertUndefinedToNull) {
          val = null;
        }
        return val;
      },
      set: function(obj, key, val) {
        var childOpts, err, fullKey, hasKey, newVal, oldVal, ref;
        if (typeof key === 'symbol') {
          return true;
        }
        debug('set:' + key);
        hasKey = key in obj;
        fullKey = local.makeKey(opts._rootName, key);
        if (currentOpts.onSet) {
          currentOpts.onSet(fullKey, val);
        }
        if (currentOpts.onSetNonDefined && !hasKey) {
          currentOpts.onSetNonDefined(fullKey, val);
        }
        if (currentOpts.preventExtend === true && !hasKey) {
          err = local.makeError('EXTEND', currentOpts.name + ": cannot extend key '" + fullKey + "'");
          return currentOpts.onError(err);
        }
        if (currentOpts.preventMutate === true) {
          err = local.makeError('MUTATE', currentOpts.name + ": cannot mutate key '" + fullKey + "'");
          return currentOpts.onError(err);
        }
        if (currentOpts.preventUndefined === true && val === void 0) {
          err = local.makeError('SET_UNDEFINED', currentOpts.name + ": cannot set undefined on key '" + fullKey + "'");
          return currentOpts.onError(err);
        }
        if (currentOpts.deepProxy === true) {
          if ((ref = _.typeOf(val)) === 'array' || ref === 'object') {
            childOpts = _.omit(currentOpts.deepProxyOptions || currentOpts);
            childOpts._rootName = local.makeKey(childOpts._rootName, key);
            val = SimpleProxy["new"](val, childOpts);
          }
        }
        if (val === void 0 && currentOpts.convertUndefinedToNull) {
          val = null;
        }
        oldVal = hasKey ? obj[key] : void 0;
        obj[key] = val;
        newVal = obj[key];
        if (currentOpts.onChange && !_.isEqual(oldVal, newVal)) {
          currentOpts.onChange(fullKey, newVal, oldVal);
        }
        return true;
      }
    });
    if (currentOpts.preventUndefined === true && val === void 0) {
      for (key in self) {
        val = self[key];
        if (typeof val !== 'undefined') {
          continue;
        }
        err = local.makeError('SET_UNDEFINED', currentOpts.name + ": cannot set undefined on key '" + key + "'");
        return currentOpts.onError(err);
      }
    }
    if (currentOpts.deepProxy === true) {
      for (key in self) {
        val = self[key];
        if (currentOpts.convertUndefinedToNull && val === void 0) {
          self[key] = null;
        }
        if ((ref = _.typeOf(val)) !== 'array' && ref !== 'object') {
          continue;
        }
        childOpts = _.omit(currentOpts.deepProxyOptions || currentOpts);
        childOpts._rootName = local.makeKey(childOpts._rootName, key);
        self[key] = SimpleProxy["new"](val, childOpts);
      }
    }
    return proxy;
  }

  SimpleProxy.freeze = function(self, opts) {
    if (opts == null) {
      opts = {};
    }
    _.defaults(opts, {
      preventAccess: true,
      preventDefine: true,
      preventDelete: true,
      preventExtend: true,
      preventMutate: true
    });
    return SimpleProxy["new"](self, opts);
  };

  SimpleProxy.deepFreeze = function(self, opts) {
    if (opts == null) {
      opts = {};
    }
    _.defaults(opts, {
      deepProxy: true,
      preventAccess: true,
      preventDefine: true,
      preventDelete: true,
      preventExtend: true,
      preventMutate: true
    });
    return SimpleProxy["new"](self, opts);
  };

  SimpleProxy.seal = function(self, opts) {
    if (opts == null) {
      opts = {};
    }
    _.defaults(opts, {
      preventAccess: true,
      preventDefine: true,
      preventDelete: true,
      preventExtend: true
    });
    return SimpleProxy["new"](self, opts);
  };

  SimpleProxy.deepSeal = function(self, opts) {
    if (opts == null) {
      opts = {};
    }
    _.defaults(opts, {
      deepProxy: true,
      preventAccess: true,
      preventDefine: true,
      preventDelete: true,
      preventExtend: true
    });
    return SimpleProxy["new"](self, opts);
  };

  SimpleProxy.access = function(self, opts) {
    if (opts == null) {
      opts = {};
    }
    _.defaults(opts, {
      preventAccess: true
    });
    return SimpleProxy["new"](self, opts);
  };

  SimpleProxy.deepAccess = function(self, opts) {
    if (opts == null) {
      opts = {};
    }
    _.defaults(opts, {
      deepProxy: true,
      preventAccess: true
    });
    return SimpleProxy["new"](self, opts);
  };

  return SimpleProxy;

})();

module.exports = SimpleProxy;
